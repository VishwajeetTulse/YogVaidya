datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

enum Role {
  USER
  MENTOR
  MODERATOR
  ADMIN
}

enum MentorType{
  YOGAMENTOR
  MEDITATIONMENTOR
  DIETPLANNER
}

enum SessionType {
  YOGA
  MEDITATION
  DIET
}

enum ScheduleStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum SubscriptionPlan {
  SEED
  BLOOM
  FLOURISH
}

enum SubscriptionStatus {
  ACTIVE
  ACTIVE_UNTIL_END  // For subscriptions that are cancelled but still active
  INACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum LogLevel {
  INFO
  WARNING
  ERROR
}

enum LogCategory {
  AUTHENTICATION
  SYSTEM
  USER
  SUBSCRIPTION
  PAYMENT
  MENTOR
  MODERATOR
  ADMIN
  TICKET
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_USER
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  SUBSCRIPTION_ISSUE
  PAYMENT_PROBLEM
  MENTOR_APPLICATION
  TECHNICAL_SUPPORT
  ACCOUNT_ISSUE
  REFUND_REQUEST
  GENERAL_INQUIRY
  BUG_REPORT
  FEATURE_REQUEST
}

model User {
  id                    String            @id @map("_id")
  role                  Role              @default(USER)
  mentorType            MentorType?
  email                 String
  name                  String?
  phone                 String?
  emailVerified         Boolean?
  image                 String?
  createdAt             DateTime
  updatedAt             DateTime
  isAvailable           Boolean           @default(true)  // For mentors to control their availability
  subscriptionPlan      SubscriptionPlan?  // Optional field, will be null by default
  subscriptionStatus    SubscriptionStatus @default(INACTIVE)
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  billingPeriod         String?           // "monthly" or "annual"
  razorpaySubscriptionId String?
  razorpayCustomerId    String?
  lastPaymentDate       DateTime?
  nextBillingDate       DateTime?
  paymentAmount         Float?
  isTrialActive         Boolean           @default(false)  // Changed from true to false
  trialEndDate          DateTime?
  autoRenewal           Boolean?          // Changed from default(true) to optional
  trialUsed             Boolean           @default(false)

  sessionPrice          Float?            // Price for one-on-one sessions (in rupees)

  sessions              Session[]
  accounts              Account[]
  systemLogs            SystemLog[]
  schedules             Schedule[]
  tickets               Ticket[]
  assignedTickets       Ticket[]          @relation("AssignedTickets")
  studentBookings       SessionBooking[]  @relation("StudentBookings")
  mentorBookings        SessionBooking[]  @relation("MentorBookings")
  mentorTimeSlots       MentorTimeSlot[]  @relation("MentorTimeSlots")
  studentDietPlans      DietPlan[]        @relation("StudentDietPlans")
  mentorDietPlans       DietPlan[]        @relation("MentorDietPlans")


  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model MentorApplication {
  id             String   @id @map("_id")
  name           String
  email          String
  phone          String
  profile        String?
  experience     Int      // Changed back to Int since database now has clean numeric data
  expertise      String
  certifications String
  powUrl         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String?
  status         String?  // <-- Add this line for application status
  mentorType     MentorType?

  // Relations
  timeSlots      MentorTimeSlot[]
  sessionBookings SessionBooking[]

  @@map("mentor_application")
}

model SystemLog {
  id        String      @id @map("_id")
  timestamp DateTime    @default(now())
  userId    String?
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  action    String
  category  LogCategory
  details   String?
  level     LogLevel
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime    @default(now())

  @@index([timestamp(sort: Desc)])
  @@index([userId])
  @@index([category])
  @@index([level])
  @@map("systemLog")
}

model Schedule {
  id            String         @id @map("_id")
  title         String
  scheduledTime DateTime
  link          String
  duration      Int            // Duration in minutes
  sessionType   SessionType
  status        ScheduleStatus @default(SCHEDULED)
  mentorId      String

  // Manual start tracking (prevents auto-completion if session manually started)
  manualStartTime   DateTime?      // When the session was actually started

  mentor        User           @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  sessionBookings SessionBooking[] @relation("ScheduleBookings")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([mentorId])
  @@index([scheduledTime])
  @@index([status])
  @@index([manualStartTime])
  @@map("schedule")
}

// Mentor available time slots
model MentorTimeSlot {
  id                String         @id @map("_id")
  mentorId          String         // Mentor who created this slot
  mentorApplicationId String?      // Reference to mentor application for compatibility
  startTime         DateTime       // When the slot starts
  endTime           DateTime       // When the slot ends
  isBooked          Boolean        @default(false)  // Whether this slot is booked
  bookedBy          String?        // User ID who booked this slot
  sessionType       SessionType    // Type of session
  maxStudents       Int           @default(1)      // Maximum students per slot (default 1)
  currentStudents   Int           @default(0)      // Currently booked students
  isRecurring       Boolean        @default(false) // Whether this is a recurring slot
  recurringDays     String[]       @default([])    // Days of week if recurring ["MONDAY", "TUESDAY"]
  price             Float?         // Price for this specific slot (overrides mentor default)
  sessionLink       String?        // Meeting link for the session (Zoom, Google Meet, etc.)
  notes             String?        // Mentor notes about this slot
  isActive          Boolean        @default(true)  // Whether this slot is available for booking
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  mentor            User           @relation("MentorTimeSlots", fields: [mentorId], references: [id], onDelete: Cascade)
  mentorApplication MentorApplication? @relation(fields: [mentorApplicationId], references: [id], onDelete: SetNull)
  sessionBookings   SessionBooking[] @relation("SlotBookings")

  @@index([mentorId])
  @@index([startTime])
  @@index([isBooked])
  @@index([isActive])
  @@index([sessionType])
  @@map("mentorTimeSlot")
}

model SessionBooking {
  id                String         @id @map("_id")
  userId            String         // Student who booked the session
  mentorId          String         // Mentor for the session
  mentorApplicationId String?      // Reference to mentor application for compatibility
  timeSlotId        String?        // Reference to the time slot (new field)
  scheduleId        String?        // Reference to schedule for group sessions
  sessionType       SessionType
  scheduledAt       DateTime       // When the session is scheduled
  status            ScheduleStatus @default(SCHEDULED)
  duration          Int?           // Duration in minutes (from time slot or schedule)
  notes             String?        // Additional notes from the student
  paymentDetails    Json?          // Payment information
  amount            Float?         // Payment amount
  paymentStatus     String?        // Payment status

  // Manual start tracking (prevents auto-completion if session manually started)
  manualStartTime   DateTime?      // When the session was actually started

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  user              User           @relation("StudentBookings", fields: [userId], references: [id], onDelete: Cascade)
  mentor            User           @relation("MentorBookings", fields: [mentorId], references: [id], onDelete: Cascade)
  mentorApplication MentorApplication? @relation(fields: [mentorApplicationId], references: [id], onDelete: SetNull)
  timeSlot          MentorTimeSlot? @relation("SlotBookings", fields: [timeSlotId], references: [id], onDelete: SetNull)
  schedule          Schedule?      @relation("ScheduleBookings", fields: [scheduleId], references: [id], onDelete: SetNull)
  dietPlans         DietPlan[]     @relation("SessionDietPlans")

  @@index([userId])
  @@index([mentorId])
  @@index([timeSlotId])
  @@index([scheduleId])
  @@index([scheduledAt])
  @@index([status])
  @@index([paymentStatus])
  @@index([manualStartTime])
  @@map("sessionBooking")
}

model Ticket {
  id              String         @id @map("_id")
  ticketNumber    String         @unique  // Human-readable ticket number like "TKT-2024-001"
  title           String
  description     String
  status          TicketStatus   @default(OPEN)
  priority        TicketPriority @default(MEDIUM)
  category        TicketCategory

  // User who created the ticket
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Moderator assigned to the ticket (optional)
  assignedToId    String?
  assignedTo      User?          @relation("AssignedTickets", fields: [assignedToId], references: [id], onDelete: SetNull)

  // Metadata
  tags            String[]       @default([])
  metadata        Json?          // For storing additional context like related entities

  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  resolvedAt      DateTime?
  closedAt        DateTime?

  @@index([userId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([category])
  @@index([createdAt(sort: Desc)])
  @@map("ticket")
}

model DietPlan {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId

  // Relationships
  studentId       String
  student         User            @relation("StudentDietPlans", fields: [studentId], references: [id], onDelete: Cascade)
  mentorId        String
  mentor          User            @relation("MentorDietPlans", fields: [mentorId], references: [id], onDelete: Cascade)
  sessionId       String?         @db.ObjectId // Optional - link to specific booking
  session         SessionBooking? @relation("SessionDietPlans", fields: [sessionId], references: [id], onDelete: SetNull)

  // Content - TipTap stores as JSON
  content         Json            // Rich text content (ProseMirror JSON format)

  // Metadata
  title           String          // e.g., "7-Day Weight Loss Plan"
  description     String?         // Brief summary for list view
  tags            String[]        @default([]) // e.g., ["weight-loss", "vegetarian", "1800-cal"]

  // Status
  isActive        Boolean         @default(true)
  isDraft         Boolean         @default(false)

  // Tracking
  viewCount       Int             @default(0)
  lastViewedAt    DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([studentId])
  @@index([mentorId])
  @@index([sessionId])
  @@index([createdAt(sort: Desc)])
  @@index([isDraft])
  @@map("dietPlan")
}
