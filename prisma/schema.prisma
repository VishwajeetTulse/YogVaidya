datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  MENTOR
  MODERATOR
  ADMIN
}

enum MentorType{
  YOGAMENTOR
  MEDITATIONMENTOR
}

enum SessionType {
  YOGA
  MEDITATION
}

enum ScheduleStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum SubscriptionPlan {
  SEED
  BLOOM
  FLOURISH
}

enum SubscriptionStatus {
  ACTIVE
  ACTIVE_UNTIL_END  // For subscriptions that are cancelled but still active
  INACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum LogLevel {
  INFO
  WARNING
  ERROR
}

enum LogCategory {
  AUTHENTICATION
  SYSTEM
  USER
  SUBSCRIPTION
  PAYMENT
  MENTOR
  MODERATOR
  ADMIN
}

model User {
  id                    String            @id @map("_id")
  role                  Role              @default(USER)
  mentorType            MentorType?
  email                 String
  name                  String?
  phone                 String?
  emailVerified         Boolean?
  image                 String?
  createdAt             DateTime
  updatedAt             DateTime
  // Subscription Details
  subscriptionPlan      SubscriptionPlan?  // Optional field, will be null by default
  subscriptionStatus    SubscriptionStatus @default(INACTIVE)
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  billingPeriod         String?           // "monthly" or "annual"
  razorpaySubscriptionId String?
  razorpayCustomerId    String?
  lastPaymentDate       DateTime?
  nextBillingDate       DateTime?
  paymentAmount         Float?
  isTrialActive         Boolean           @default(false)  // Changed from true to false
  trialEndDate          DateTime?
  autoRenewal           Boolean?          // Changed from default(true) to optional
  
  sessions              Session[]
  accounts              Account[]
  systemLogs            SystemLog[]
  schedules             Schedule[]
  
  
  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model MentorApplication {
  id             String   @id @map("_id")
  name           String
  email          String
  phone          String
  profile        String?
  experience     String
  expertise      String
  certifications String
  powUrl         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String?
  status         String?  // <-- Add this line for application status
  mentorType     MentorType?
  @@map("mentor_application")
}

model SystemLog {
  id        String      @id @map("_id") 
  timestamp DateTime    @default(now())
  userId    String?
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  action    String
  category  LogCategory
  details   String?
  level     LogLevel
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime    @default(now())

  @@index([timestamp(sort: Desc)])
  @@index([userId])
  @@index([category])
  @@index([level])
  @@map("systemLog")
}

model Schedule {
  id            String         @id @map("_id") 
  title         String
  scheduledTime DateTime
  link          String
  duration      Int            // Duration in minutes
  sessionType   SessionType
  status        ScheduleStatus @default(SCHEDULED)
  mentorId      String
  mentor        User           @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([mentorId])
  @@index([scheduledTime])
  @@index([status])
  @@map("schedule")
}